function(obj){

//	__platform__.lib.debug.print(this.name,'tracking::medium','Begin construction. Object name : '+this.obj.name+' - Prefix : '+this.prefix);		__platform__.lib.debug.print(this.name,'learning::low','Object "base" is created. It represents the root of the complex object we\'ll build now!(ref:'+obj.name+' -o- '+prefix+')');

            var loop = new __platform__.lib.loop;
            var check = __platform__.lib.check;

            var build = document.createElement( obj.container || 'div' );
            var element;
            var html;
            var id;
            var cls = '';

            loop.object.recursive (obj,function(a,b){ 

                    //do stuff
                    if (a ===  "element") { element = b }
                    else if (a ===  "id") { id = b }
                    else if (a ===  "class") { cls += " "+b }
                    else if (a ===  "design") { loop.object.recursive (a,function(a,b){
                                                    
                                                //apply design 

                                               })}
                    else if (a ===  "methods") { loop.object.recursive (a,function(a,b){
                                                    
                                                //apply methods 

                                               })}

                    //transform into html
                    if (element != 'undefined' && typeof element == 'string') {
                        element = __platform__.control.build(__platform__.env.components[element]) || document.createElement('div')
                    } 
                    if (check.isFunction(element)) {
                        element = element();
                    }

                    //finalize
                    if (id) element.id = id
                    if (cls) element.className = cls

                    //append to parent
                    if ( check.isHTMLObject(element) ) {
                       par = a.slice(0, -1);
                       alert(par)
                       if ( ! par ) { build.appendChild(element) }
                       else { par.appendChild(element) }
                    }

            });

            return build;

}
