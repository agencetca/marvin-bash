Coffeemaker.core.capacities.log = {

	task : {
	
		init : function (id,value,total) {
	
			if ( ! Coffeemaker.logs ) Coffeemaker.logs = {};
			if ( ! Coffeemaker.logs.tasks ) Coffeemaker.logs.tasks = {};
			if ( ! Coffeemaker.logs.tasks[id] ) Coffeemaker.logs.tasks[id] = {};
			
			
			//if ( ! Coffeemaker.logs.tasks[identifier]['ETA'] ) {
				Coffeemaker.logs.tasks[id]['ETA'] = value |Â 0;
		
			
			if ( ! Coffeemaker.logs.tasks[id]['total'] ) {
				Coffeemaker.logs.tasks[id]['total'] = total | 0;
				Coffeemaker.logs.tasks[id]['ratio'] = 100/parseInt(total,10) | 0;
			}
			
			Coffeemaker.logs.tasks['current'] = id;
		
		},
	
		update : function (id,newvalue, identifier) {
		
			if ( ! Coffeemaker.logs ) Coffeemaker.logs = {};
			if ( ! Coffeemaker.logs.tasks ) Coffeemaker.logs.tasks = {};
			if ( ! Coffeemaker.logs.tasks[id] ) Coffeemaker.logs.tasks[id] = {};
		
			//alert(identifier);
			//var newvalue = 100-()+Coffeemaker.logs.tasks[identifier]['ratio'];
			var a = newvalue*100/Coffeemaker.logs.tasks[id]['total'];
			var b = 100-a;
			var c = b+Coffeemaker.logs.tasks[id]['ratio'];
			var d = c+1;
			this.init(id,d);
		
		},
		
		get : function (id,key) {
            
            if ( ! key ) {
                
			    if (Coffeemaker.logs && Coffeemaker.logs.tasks 
			    && Coffeemaker.logs.tasks[id]) {
				    return Coffeemaker.logs.tasks[id];
			    }
            } else {

			    if (Coffeemaker.logs && Coffeemaker.logs.tasks 
			    && Coffeemaker.logs.tasks[id] && Coffeemaker.logs.tasks[id][key]) {
				    return Coffeemaker.logs.tasks[id][key];
			    }
            }
		}
	},

	exception : function (identifier,message,object) {
	
		//var identifier = arguments[0];
		//Array.prototype.shift.apply(arguments);
		
		if ( ! Coffeemaker.logs ) Coffeemaker.logs = {};
		if ( ! Coffeemaker.logs.exceptions ) Coffeemaker.logs.exceptions = {};
		if ( ! Coffeemaker.logs.exceptions[identifier] ) Coffeemaker.logs.exceptions[identifier] = [];
		
		var exception = {};
		exception.message = message;
		exception.object = object;
		
		Coffeemaker.logs.exceptions[identifier].push(exception);
	
	},

	network : {

		fail : function (type,status,url) {
	
		
			var load = Coffeemaker.core.capacities.load;
			var check = load('check');

			if ( ! Coffeemaker.logs ) Coffeemaker.logs = {};
			if ( ! Coffeemaker.logs.network ) Coffeemaker.logs.network = {};
			if ( ! Coffeemaker.logs.network.failures ) Coffeemaker.logs.network.failures = {};
			if ( ! Coffeemaker.logs.network.failures[type] ) Coffeemaker.logs.network.failures[type] = [];
			if ( ! Coffeemaker.logs.network.failures[type][status] ) {
				Coffeemaker.logs.network.failures[type][status] = [];
			}
			//if ( ! check.inArray(url,Coffeemaker.network.failures[type][status])) {
				Coffeemaker.logs.network.failures[type][status].push(url);
			//}
		},
	
		success : function (type,status,url) {
	
			var load = Coffeemaker.core.capacities.load;
			var check = load('check');
		
			if ( ! Coffeemaker.logs ) Coffeemaker.logs = {};
			if ( ! Coffeemaker.logs.network ) Coffeemaker.logs.network = {};
			if ( ! Coffeemaker.logs.network.success ) Coffeemaker.logs.network.success = {};
			if ( ! Coffeemaker.logs.network.success[type] ) Coffeemaker.logs.network.success[type] = [];
			if ( ! Coffeemaker.logs.network.success[type][status] ) {
				Coffeemaker.logs.network.success[type][status] = [];
			}
			//if ( ! check.inArray(url,Coffeemaker.logs.network.success[type][status])) {
				Coffeemaker.logs.network.success[type][status].push(url);
			//}
		}
	
	}
	
}
