Coffeemaker.core.capacities.compile = function(o,opt){
	
	    //needed repositories
	    var load = Coffeemaker.core.capacities.load;
        var ex = load('exec');
        
        if ( ! Coffeemaker.components) Coffeemaker.components = {};

        ex({
        
            name : 'compilation -- preparation',
            payload : function () {

	            var load = Coffeemaker.core.capacities.load;
	            var check = load('check');
	            var loop = load('loop');
	            var analyze = load('analyze');
	            var toolchain = load('toolchain');
	            var thing;
	    
                //if ( check.isString(o)) {
                //o = analyze.engine('Coffeemaker/components/'+o);
                //}
                
                //if ( ! check.isObject(o.structure)) {
                //	return;
                //}
                
                if (check.isJSON(o)) {
                o = JSON.parse(o);
                }
                
                //Object copy
                //TODO : Hacked but MUST be optimized
                f = function (i) {
                this.structure = (function() {Â 
                FLAG=0;
                loop.object.simple(i,function(x,y){
                if(! check.isObject(y)){
                FLAG=1;
                }
                });
                if (FLAG === 0) { return { a : JSON.parse(JSON.stringify(o.structure || {})) } }
                else{ return JSON.parse(JSON.stringify(o.structure  || {}))}
                }());
                
                this.design = JSON.parse(JSON.stringify(o.design || {}))
                this.logic = JSON.parse(JSON.stringify(o.logic || {}))
                return this;
                } 

                return [ f, o, opt ];
                
            },
            timeout : 0,
            callback : {
                
                    name : 'compilation -- configuration',
                    payload : function (a) {

                    var load = Coffeemaker.core.capacities.load;
                    var check = load('check');
                    var loop = load('loop');
                    var analyze = load('analyze');
                    var toolchain = load('toolchain');

                    var f = a[0];
                    var o=a[1];

                    o = new f(o)
                    //configure
                    toolchain.configure(o);
                    return [o, opt];

                },
                callbak : {

                    name : 'compilation',
                    payload : function (a) {

                        var load = Coffeemaker.core.capacities.load;
                        var check = load('check');
                        var loop = load('loop');
                        var analyze = load('analyze');
                        var toolchain = load('toolchain');

                        var o = a[0];
                        var opt = a[1];

    	                //make
    	                var thing = toolchain.make(o)

                        return [ thing, opt ];

                    },
                    callback : {
                        
                        name : 'injection',
                        payload : function (a) {

                              var load = Coffeemaker.core.capacities.load;
                              var check = load('check');
                              var loop = load('loop');
                              var analyze = load('analyze');
                              var toolchain = load('toolchain');
                                
                              var thing = a[0];
                              var opt = a[1];
                              
                              //inject
                              if (opt) {
                              var args = Array.prototype.slice.call(arguments);
                              args.shift();
                              args.unshift(thing);
                              toolchain.inject.apply('',args)
                              }
                              
                              //return thing;

                        }

                    }
                }
            }
        
        });
		


}
