function(obj){

            var loop = new __platform__.lib.loop;
            var check = __platform__.lib.check;
            var make =  __platform__.lib.make;

            var fabric = function (elem,object,type) {

                var l;
                var o;
                var t;
                var e;

                if (type === 'design') {
                    o = object[type];
                    l = function (g,h) {
                        e.style.setProperty(g,h); 
                    }
                } 
                else if (type === 'methods') {
                    o = object['logic'];
                    l = function (g,h) {
                    }
                } 
                else if (type === 'events') {
                    o = object['logic'];
                    l = function (func,args) {
                        alert(func.replace(/\//,"."));
                        //alert(o[func.replace(/\//,".")]);
                        //if (eve) {
                        //    if (check.isArray(args)) {
                        //        e.addEventListener(eve, function(nt){
                        //            __platform__.env.methods[func](nt,args);
                        //        }, false);
                        //    }
                        //}
                    }
                } 
                else {
                    return;
                }

                t = elem[type];
                e = elem['element'];

                if ( check.isString(t)) {
                    if (t.match(',')) {
                        loop.array (t.split(','),function(x,y) {
                            if (check.isObject(o[y])) {
                                loop.object.recursive (o[y],function(i,r) {
                                    l(i,r);
                                });
                            }
                        });
                    } else {
                        if (check.isObject(o[t])) {
                            loop.object.recursive (o[t],function(x,y) {
                                l(x,y);
                            });
                        }
                    }
                }else if ( check.isArray(t)) {
                    loop.array (t,function(x,y) {
                        if (check.isObject(o[y])) {
                            loop.object.recursive (o[y],function(i,r) {
                                l(i,r);
                            });
                        } else if (check.isArray(o[y])) {
                            loop.array (o[y],function(i,r) {
                                l(i,r);
                            });
                        }

                    });
                }else if ( check.isObject(t)) {

                    var eve;
                    loop.object.simple (t,function(x,y) {
                        //TESTING
                        if (check.isEventSupported(x)) {
                            if ( check.isObject(y) ) {
                                loop.object.simple (y,function(i,r) {
                                    if (check.isString(r) || check.isArray(r) ) {
                                        l(i,r);
                                    }
                                });
                            }
                        }
                        //if (check.isObject(o[x])) {
                        //    loop.object.simple (o[x],function(i,r) {
                        //        l(i,r,eve);
                        //    });
                        //}
                        //ENDTEST

                        //if (check.isObject(o[y])) {
                        //    loop.object.recursive (o[y],function(i,r) {
                        //        l(i,r);
                        //    });
                        //} else if (check.isArray(o[y])) {
                        //    loop.array (o[y],function(i,r) {
                        //        l(i,r);
                        //    });
                        //}
                    });
                }
            
            }

            if ( check.isObject(obj.structure) ) {
                console.log('obj to configure : '+obj.structure)
                loop.object.recursive (obj.structure,function(a,b) { 
                    if ( check.isObject(b) && check.doesExist(b.element) ) {
                        console.log('element to configure : '+b.element)
                        if( check.isHTMLObject(b.element = make(b.element)) ) {
                            if ( b.id ) b.element.id = b.id;
                            if ( b.cls ) b.element.className = b.cls;
                            if ( b.design ) {
                                fabric(b,obj,'design')
                            }
                            if ( b.methods ) {
                                fabric(b,obj,'methods')
                            }
                            if ( b.events ) {
                                fabric(b,obj,'events')
                            }
                        }
                    }
                });
            }            
}
